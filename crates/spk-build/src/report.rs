// Copyright (c) Contributors to the SPK project.
// SPDX-License-Identifier: Apache-2.0
// https://github.com/spkenv/spk

use std::collections::HashMap;

use spk_schema::foundation::ident_component::Component;
use spk_schema::{BuildIdent, Package, Variant};
use spk_solve::Solution;

/// The build report is constructed by the [`crate::BinaryPackageBuilder`]
/// during its execution and contains detailed information about
/// the build setup, execution, and output.
pub struct BuildReport<P, V>
where
    P: Package,
    V: Variant,
{
    pub setup: BuildSetupReport<P, V>,
    pub output: BuildOutputReport,
}

/// Details about all computation and setup done before the
/// execution of the package's build script.
pub struct BuildSetupReport<P, V>
where
    P: Package,
    V: Variant,
{
    /// The resolved build environment
    pub environment: Solution,
    /// The binary package created by this build
    pub package: P,
    /// The variant describing this build
    pub variant: V,
    /// The state of the filesystem before the build started
    ///
    /// This is essentially the full resolved build environment
    /// where each entry is tagged with the package that owns
    /// it within the build environment.
    pub environment_filesystem: spfs::tracking::Manifest<BuildIdent>,
}

/// Details about the generated files and resulting output of
/// the package build script and collected components.
#[derive(Debug, Default)]
pub struct BuildOutputReport {
    /// The set of filesystem changes made by the
    /// build and captured as an spfs layer before being
    /// split into components
    pub collected_layer: spfs::tracking::Manifest,
    /// An itemized list of changes made during the build process
    pub collected_changes: Vec<spfs::tracking::Diff<BuildIdent, BuildIdent>>,
    /// A report for each component generated by this build
    pub components: HashMap<Component, BuiltComponentReport>,
}

/// Details for one component generated by a binary build
#[derive(Debug)]
pub struct BuiltComponentReport {
    /// The layer digest of the component as stored in spfs
    pub layer: spfs::Digest,
    /// The set of files contained in this component
    pub manifest: spfs::tracking::Manifest,
}
