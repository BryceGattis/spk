#!/spfs/bin/python3
# Copyright (c) Sony Pictures Imageworks, et al.
# SPDX-License-Identifier: Apache-2.0
# https://github.com/imageworks/spk

from pathlib import Path
from typing import Any, Dict, List, Optional, Set
import argparse
import json
import logging
import operator
import os
import packaging.markers
import packaging.version
import pkginfo
import re
import subprocess
import sys
import tempfile


logging.basicConfig(format="%(message)s", stream=sys.stdout, level=logging.INFO)
_LOGGER = logging.getLogger()
BAKED_PYTHON_PACKAGES = ("setuptools", "pip", "wheel")


def spk_exe() -> str:
    return os.environ.get("SPK_BIN_PATH", "spk")


def main() -> int:
    pip_cmd = argparse.ArgumentParser(
        "spk-convert-pip", description="Convert and import packages using pip"
    )
    pip_cmd.add_argument(
        "--python-version", default="3.7", help="The version of python to install for"
    )
    pip_cmd.add_argument("--python-abi", help="The python abi to target")
    pip_cmd.add_argument(
        "--target-repo",
        "-r",
        type=str,
        metavar="NAME",
        default="origin",
        help="The repository to publish to. Any configured spfs repository can be named here.",
    )
    pip_cmd.add_argument(
        "--publish",
        default=None,
        action="store_true",
        help="Also publish the packages after convert",
    )
    pip_cmd.add_argument(
        "--force",
        "-f",
        action="store_true",
        default=False,
        help="Forcefully overwrite any existing publishes",
    )
    pip_cmd.add_argument(
        "--no-deps",
        dest="deps",
        action="store_false",
        default=True,
        help="Do not follow and convert dependencies of the requested pip packages",
    )
    pip_cmd.add_argument(
        "packages",
        nargs="+",
        metavar="NAME[VERSION]",
        help="The pip packages to import (eg: pytest,  PySide2>=5)",
    )
    args = pip_cmd.parse_args()

    specs = []
    importer = PipImporter().recursive(args.deps)
    if args.python_version:
        importer.with_python_version(args.python_version)
    if args.python_abi:
        importer.with_python_abi(args.python_abi)

    for name in args.packages:
        version = ""
        match = re.match(r"^(.*?)([<>=~]+.*)?$", name)
        if match:
            name, version = match.group(1), match.group(2) or ""

        specs.extend(importer.import_package(name, version))

    print("\nThe following packages were converted:\n")
    for spec in specs:
        print(f"  {spec.get('pkg')}")
    print("")

    if args.publish is None:
        print("These packages are now available in the local repository")
        args.publish = bool(
            input("Do you want to also publish these packages? [y/N]: ").lower()
            in ("y", "yes")
        )

    if args.publish:
        cmd = [spk_exe(), "publish", "-r", args.target_repo]
        if args.force:
            cmd.append("--force")
        cmd.extend([spec["pkg"] for spec in specs])
        subprocess.check_call(cmd)


class PipImporter:
    def __init__(self) -> None:

        self._python_version = "3.7"
        self._python_abi: Optional[str] = "cp37m"
        self._follow_deps = True
        self._visited: Set[str] = set()

    def with_python_version(self, version: str) -> "PipImporter":

        assert (
            re.match(r"\d+.\d+", version) is not None
        ), "python version must be in the form x.x"
        self._python_version = version
        return self

    def with_python_abi(self, version: Optional[str]) -> "PipImporter":

        self._python_abi = version
        return self

    def recursive(self, recursive: bool) -> "PipImporter":

        self._follow_deps = recursive
        return self

    def import_package(self, name: str, version: str = "") -> List[Dict[str, Any]]:

        if name in self._visited:
            _LOGGER.debug(f"found recursive dependency {name}")
            return []
        self._visited.add(name)

        _LOGGER.info(f"fetching pip package... {name} {version}")

        converted = []
        with tempfile.TemporaryDirectory() as _tmpdir:

            tmpdir = Path(_tmpdir)
            pip_command = [
                "pip",
                "download",
                f"{name}{version}",
                "--python-version",
                self._python_version,
                "--abi",
                self._python_abi,
                "--no-deps",
                "--dest",
                _tmpdir,
            ]

            _LOGGER.debug(" ".join(pip_command))
            try:
                subprocess.check_output(pip_command, stderr=subprocess.STDOUT)
            except subprocess.CalledProcessError as e:
                print(e.stdout.decode())
                raise RuntimeError("failed to download pip package")
                return []

            downloaded = list(tmpdir.glob(f"*"))
            assert (
                len(downloaded) == 1
            ), f"Expected pip to download one file for {name} {downloaded}"

            converted.extend(self.process_pip_package(downloaded[0]))

        return converted

    def process_pip_package(self, filepath: Path) -> List[Dict[str, Any]]:

        if filepath.name.endswith(".whl"):
            info = pkginfo.Wheel(filepath)
        elif filepath.name.endswith(".tar.gz") or filepath.name.endswith(".zip"):
            info = pkginfo.SDist(filepath)
        else:
            raise NotImplementedError(
                f"No logic to install distribution format: {filepath}"
            )
        return self._process_package(info)

    def _process_package(self, info: pkginfo.Distribution) -> List[Dict[str, Any]]:

        assert not info.requires, "No support for installation requirements"
        assert not info.requires_external, "No support for external requirements"
        assert not info.supported_platforms, "No support for supported platforms field"

        spec = {
            "pkg": f"{_to_spk_name(info.name)}/{_to_spk_version(info.version)}",
            "sources": [],
            "build": {
                "options": [
                    {"var": "os"},
                    {"var": "arch"},
                    {"var": "distro"},
                    {"pkg": f"python/{self._python_version}"},
                    {"pkg": f"python-pip"},
                ]
            },
            "install": {
                "requirements": [],
            },
        }
        api_var = f"/{self._python_abi}" if self._python_abi else ""
        spec["build"]["options"].append({"var": f"python.abi{api_var}"})

        spec["build"]["script"] = [
            "export PYTHONNOUSERSITE=1",
            "export PYTHONDONTWRITEBYTECODE=1",
            f"/spfs/bin/python -BEs -m pip install {info.name}=={info.version} --no-deps",
        ]

        builds = []
        if info.requires_python:
            _LOGGER.debug(
                "ignoring defined python range, other version of python will need to have this package reconverted"
            )
        # python packages can support a wide range of versions, and present dynamic
        # requirements based on the version used - spk does not do this so instead
        # we restrict the package to the python version that it's being imported for
        spec["install"]["requirements"].append(
            {"pkg": f"python/{self._python_version}"}
        )

        # the package may specify multiple requirements for the same package,
        # for example:
        #    Requires-Dist: numpy (>=1.17.0) ; python_version >= "3.7"
        #    Requires-Dist: numpy (>=1.17.3) ; python_version >= "3.8"
        #    Requires-Dist: numpy (>=1.19.3) ; python_version >= "3.9"
        dist_requirements = {}

        for requirement_str in info.requires_dist:
            if ";" not in requirement_str:
                requirement_str += ";"
            version_str, markers_str = requirement_str.split(";", 1)

            if markers_str.strip():
                marker = packaging.markers.Marker(markers_str)
                if not marker.evaluate(
                    {"extra": "", "python_version": self._python_version}
                ):
                    _LOGGER.debug(f"Skip requirement due to markers {requirement_str}")
                    continue

            _LOGGER.debug(f"converting dependency requirement {version_str}")

            # Sometimes dependency requirement strings look like:
            #     "shiboken2 (==5.15.2.1)"
            # Other times they look like:
            #     "typing-extensions>=4.5"
            match = re.match(r"([^ !<>=~]+)\s*(?:\(?([^)]*)\)?)?", version_str.strip())
            assert match, f"Failed to parse requirement string: {version_str}"

            pypi_name = match.group(1)
            if pypi_name in BAKED_PYTHON_PACKAGES:
                _LOGGER.warning(
                    f"skipping requirement for {pypi_name}, this package cannot be updated with the "
                    "pip conversion since it's baked into the spk python package"
                )
                continue
            spk_name = _to_spk_name(pypi_name)
            spk_version_range = _to_spk_version_range(match.group(2) or "*")

            dist_requirements.setdefault(
                spk_name, {"pypi_name": pypi_name, "requirements": []}
            )["requirements"].append((spk_version_range, match.group(2) or ""))

        for spk_name, requirement in dist_requirements.items():
            # Join all the requirements together and let spk figure out if
            # they are compatible. Example:
            #    ">=1.17.0,>=1.17.3,>=1.19.3"
            spk_requirements = ",".join(
                map(operator.itemgetter(0), requirement["requirements"])
            )

            request = {"pkg": f"{spk_name}/{spk_requirements}"}
            spec["install"]["requirements"].append(request)

            if self._follow_deps:
                _LOGGER.debug("following dependencies...")
                pypi_requirements = ",".join(
                    map(operator.itemgetter(1), requirement["requirements"])
                )
                builds.extend(
                    self.import_package(requirement["pypi_name"], pypi_requirements)
                )

        with tempfile.NamedTemporaryFile("w") as spec_file:
            json.dump(spec, spec_file)
            spec_file.flush()
            _LOGGER.info(f"building generated package spec... {spec['pkg']}")
            try:
                subprocess.check_output(
                    [spk_exe(), "build", "-vv", spec_file.name],
                    stderr=subprocess.STDOUT,
                )
            except subprocess.CalledProcessError as e:
                print(e.stdout.decode())
                raise RuntimeError("failed to build generated package")
                return []

            builds.insert(0, spec)

        return builds


def _to_spk_name(name: str) -> str:

    name = name.lower().replace("_", "-").replace(".", "-")
    if not name.startswith("python-"):
        name = "python-" + name
    return name


def _to_spk_version(version: str) -> str:

    python_version = packaging.version.parse(version)
    spk_version = python_version.base_version
    pre = []
    if python_version.pre is not None:
        name, num = python_version.pre
        pre.append(f"{name}.{num}")
    if python_version.dev is not None:
        pre.append(f"dev.{int(python_version.dev)}")
    if pre:
        spk_version += f"-{','.join(pre)}"
    if python_version.post is not None:
        spk_version += f"+post.{int(python_version.post)}"
    if python_version.local:
        # irrelevant information for compatibility of versions and
        # no equal concept in spk versions specs
        pass

    return spk_version


def _to_spk_version_range(version_range: str) -> str:

    version_range = version_range.replace(" ", "").strip(",")
    versions = version_range.split(",")
    for i, version in enumerate(versions):

        stripped = version.lstrip("><=!~")
        prefix = version[: -len(stripped)]
        if "*" not in version:
            # handle pre and post release tags added to version numbers if possible
            converted = _to_spk_version(stripped).__str__()
        else:
            converted = stripped
        version = _to_spk_range_prefix(prefix) + converted

        # we cannot combine '~=' and *, but a trailing * is the
        # most common and is semantically equal to the same version
        # without a wildcard
        # !=3.7.* ==> !=3.7
        if version[0] in {"!", "="} and version.endswith(".*"):
            version = f"{version[:-2]}"
        # spk uses a single equals sign for exact version, where pip
        # would use a double
        # ==1.4.0 --> =1.4.0
        if version.startswith("=="):
            version = version[1:]
        versions[i] = version

    return ",".join(versions)


def _to_spk_range_prefix(prefix: str) -> str:

    pip_to_spk = {
        ">": ">",
        "<": "<",
        ">=": ">=",
        "<=": "<=",
        "==": "=",
        "~=": "~",
        "!=": "!=",
        "": "",
    }
    try:
        return pip_to_spk[prefix]
    except KeyError:
        raise ValueError(f"Unhandled pip version range prefix: {prefix}")


if "SCRIPT_TESTING" in os.environ:
    for version, expected in [
        ("1.0.0", "1.0.0"),
        ("1.0.dev456", "1.0-dev.456"),
        ("1.0a1", "1.0-a.1"),
        ("1.0a2.dev456", "1.0-a.2,dev.456"),
        ("1.0a12.dev456", "1.0-a.12,dev.456"),
        ("1.0a12", "1.0-a.12"),
        ("1.0b1.dev456", "1.0-b.1,dev.456"),
        ("1.0b2", "1.0-b.2"),
        ("1.0b2.post345.dev456", "1.0-b.2,dev.456+post.345"),
        ("1.0b2.post345", "1.0-b.2+post.345"),
        ("1.0rc1.dev456", "1.0-dev.456,rc.1"),
        ("1.0rc1", "1.0-rc.1"),
        ("1.0", "1.0"),
        ("1.0+abc.5", "1.0"),
        ("1.0+abc.7", "1.0"),
        ("1.0+5", "1.0"),
        ("1.0.post456.dev34", "1.0-dev.34+post.456"),
        ("1.0.post456", "1.0+post.456"),
        ("1.1.dev1", "1.1-dev.1"),
    ]:
        actual = _to_spk_version(version)
        assert actual == expected
    sys.exit(0)


if __name__ == "__main__":
    try:
        sys.exit(main())
    except Exception as e:
        _LOGGER.error(str(e))
        sys.exit(1)
