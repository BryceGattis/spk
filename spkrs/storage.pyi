from typing import List, Dict
from . import api, Digest

def local_repository() -> Repository: ...
def remote_repository(path: str = "origin") -> Repository: ...
def open_tar_repository(path: str, create: bool = False) -> Repository: ...
def open_spfs_repository(path: str, create: bool = False) -> Repository: ...
def mem_repository() -> Repository: ...
def runtime_repository() -> Repository: ...
def export_package(pkg: api.Ident, filename: str) -> None: ...
def import_package(filename: str) -> None: ...

class Repository:
    def list_packages(self) -> List[str]: ...
    def list_package_versions(self, name: str) -> List[api.Version]: ...
    def list_package_builds(self, pkg: api.Ident) -> List[api.Ident]: ...
    def list_build_components(self, pkg: api.Ident) -> List[str]: ...
    def read_spec(self, pkg: api.Ident) -> api.Spec: ...
    def get_package(self, pkg: api.Ident) -> Dict[str, Digest]: ...
    def publish_spec(self, spec: api.Spec) -> None: ...
    def remove_spec(self, pkg: api.Ident) -> None: ...
    def force_publish_spec(self, spec: api.Spec) -> None: ...
    def publish_package(
        self, spec: api.Spec, components: Dict[str, Digest]
    ) -> None: ...
    def remove_package(self, pkg: api.Ident) -> None: ...
    def upgrade(self) -> str: ...
    # true if this repo is backed by an spfs one
    def is_spfs(self) -> bool: ...
    # only available if is_spfs() -> true
    def push_digest(self, digest: Digest, dest: Repository) -> None: ...
