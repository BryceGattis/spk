from typing import List, Optional, Iterable, Union
from . import api, Digest

def local_repository() -> SpFSRepository: ...
def remote_repository(path: str) -> SpFSRepository: ...
def open_tar_repository(path: str, create: bool = False) -> SpFSRepository: ...

class Repository:
    def list_packages(self) -> Iterable[str]: ...
    def list_package_versions(self, name: str) -> Iterable[str]: ...
    def list_package_builds(
        self, pkg: Union[str, api.Ident]
    ) -> Iterable[api.Ident]: ...
    def read_spec(self, pkg: api.Ident) -> api.Spec: ...
    def get_package(self, pkg: api.Ident) -> Digest: ...
    def publish_spec(self, spec: api.Spec) -> None: ...
    def remove_spec(self, pkg: api.Ident) -> None: ...
    def force_publish_spec(self, spec: api.Spec) -> None: ...
    def publish_package(self, spec: api.Spec, digest: Digest) -> None: ...
    def remove_package(self, pkg: api.Ident) -> None: ...

class SpFSRepository:
    def __init__(self, address: str) -> None: ...
    def has_tag(self, tag: str) -> bool: ...
    def has_digest(self, digest: Digest) -> bool: ...
    def push_ref(self, reference: str, dest: SpFSRepository) -> None: ...
    def push_digest(self, digest: Digest, dest: SpFSRepository) -> None: ...
    def localize_digest(self, digest: Digest) -> None: ...
    def resolve_tag_to_digest(self, tag: str) -> Optional[Digest]: ...
    def push_tag(self, tag: str, target: Digest) -> None: ...
    def ls_all_tags(self) -> List[str]: ...
    def ls_tags(self, base: str) -> List[str]: ...
    def remove_tag_stream(self, tag: str) -> None: ...
    def write_spec(self, tag: str, payload: bytes) -> None: ...
    def read_spec(self, digest: Digest) -> str: ...
    def flush(self) -> None: ...
