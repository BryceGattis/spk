from typing import List, Sequence

from . import solve, api, storage

class TestError(Exception):
    pass

class PackageSourceTester:
    def __init__(self, spec: api.Spec, script: str) -> None: ...
    def get_solve_graph(self) -> solve.Graph: ...
    def with_option(self, name: str, value: str) -> PackageSourceTester: ...
    def with_options(self, options: api.OptionMap) -> PackageSourceTester: ...
    def with_repository(self, repo: storage.Repository) -> PackageSourceTester: ...
    def with_repositories(
        self, repos: List[storage.Repository]
    ) -> PackageSourceTester: ...
    def with_source(self, source: str) -> PackageSourceTester: ...
    def with_requirements(
        self, requests: Sequence[api.Request]
    ) -> PackageSourceTester: ...
    def test(self) -> None: ...

class PackageInstallTester:
    def __init__(self, spec: api.Spec, script: str) -> None: ...
    def get_solve_graph(self) -> solve.Graph: ...
    def with_option(self, name: str, value: str) -> PackageInstallTester: ...
    def with_options(self, options: api.OptionMap) -> PackageInstallTester: ...
    def with_repository(self, repo: storage.Repository) -> PackageInstallTester: ...
    def with_repositories(
        self, repos: Sequence[storage.Repository]
    ) -> PackageInstallTester: ...
    def with_source(self, source: Union[api.Ident, str]) -> PackageInstallTester: ...
    def with_requirements(
        self, requests: Sequence[api.Request]
    ) -> PackageInstallTester: ...
    def test(self) -> None: ...

class PackageBuildTester:
    def __init__(self, spec: api.Spec, script: str) -> None: ...
    def get_solve_graph(self) -> solve.Graph: ...
    def with_option(self, name: str, value: str) -> PackageBuildTester: ...
    def with_options(self, options: api.OptionMap) -> PackageBuildTester: ...
    def with_repository(self, repo: storage.Repository) -> PackageBuildTester: ...
    def with_source(self, source: Union[str, api.Ident]) -> PackageBuildTester: ...
    def with_repositories(
        self, repos: Sequence[storage.Repository]
    ) -> PackageBuildTester: ...
    def with_requirements(
        self, requests: Sequence[api.Request]
    ) -> PackageBuildTester: ...
    def test(self) -> None: ...
